JAVA实现远程文件读取
核心还是URL对象
方式一:
public class JavaReadRemoteFile {  
    public static void main(String[] args) throws Exception {  
        URL url = new URL("http://127.0.0.1/Test1/upload/1.txt");  
        InputStream ism=url.openStream();
        byte[] bytes=new byte[1024];
        ism.read(bytes);  
        String str=new String(bytes,"utf-8");  
        System.err.println(str);  
        while(ism.read(bytes)>-1){  
            System.err.println(str);  
        }  
    }  
  
} 

Java实现远程文件的访问与读取:
使用到的Java的核心类：java.net.URL，java.net.URLConnection，java.net.HttpURLConnection
原理：
(1)使用文件地址创建URL,如
	URLurl = new URL(url)
(2)创建url连接，如：
	URLConnection urlconn=url.openConnection()
(3)转化url连接为httpUrl连接,如：
	HttpURLConnection httpconn = (HttpURLConnection) urlconn;   
(4)读取httpconn的流,如:
	a.httpconn.getInputStream()
	b.缓存读取流：
		BufferedInputStream bis=new BufferedInputStream(httpconn.getInputStream());
(5).读到byte数组，如：
	while((r=bis.read(b))>0);

最大的感受网络远程读取文件和本地读取的获取对象不同。
本地文件就是file,而网络上文件是一个URL。

实例代码:
import java.io.BufferedInputStream;  
import java.io.File;  
import java.io.IOException;  
import java.net.HttpURLConnection;  
import java.net.MalformedURLException;  
import java.net.URL;  
import java.net.URLConnection;
  
public class FileDownload {  
    public static void main(String[] args) throws IOException {  
        //String remote_img_url="http://zhbccrm.xicp.net:8008/v1/tfs/T1WaJTByxT1R4cSCrK.png";

        String remote_img_url="http://img.baidu.com/img/iknow/sula201506/baiduzhidaowenkugaokao.png?t=1433819530";

        URL url=null;  
        URLConnection urlconn=null;
        HttpURLConnection httpconn=null;  
        BufferedInputStream bis=null;  
        try {  
            url = new URL(remote_img_url);  
            urlconn = url.openConnection();  
            //1.5以后URLConnection设置连接超时，从主机读取数据超时 单位：毫秒
            /*urlconn.setConnectTimeout(10000); 
            urlconn.setReadTimeout(20000);*//设置连接超时时间

            httpconn = (HttpURLConnection) urlconn;
            int httpResult = httpconn.getResponseCode();    
            System.out.println("httpResult::"+httpResult);

            if(httpResult==HttpURLConnection.HTTP_OK){  
                int filesize = urlconn.getContentLength(); // 取数据长度(例如:可以协助插件显示音频的长度)
                byte[] b=new byte[filesize];  
                bis=new BufferedInputStream(httpconn.getInputStream());//通过字节缓冲流读取文件 
                int r=0;  
                while((r=bis.read(b))>0);
                System.out.println("length::"+filesize);  
                //System.out.println("string:"+new String(b,"UTF-8"));  
            }  
        } catch (MalformedURLException e) {  
            e.printStackTrace();  
        } catch (IOException e) {  
            e.printStackTrace();  
        }finally{  
            if(httpconn!=null)  
                httpconn.disconnect();  
            if(bis!=null){  
                bis.close();  
            }  
        }  
    }  
} 

有时候我们读取远程的文件总是需要通过流的方式将文件返回给前台
那么我们还离不开如何将流返回给前台(response)
其中最神奇的莫过于头文件的设置(Headers,分为两种:Response Headers和Request Headers)

举例完成音频文件的读取

import java.io.File;  
import java.io.FileInputStream;  
import java.io.OutputStream;  
  
import javax.servlet.http.HttpServletRequest;  
import javax.servlet.http.HttpServletResponse;  
  
import org.springframework.stereotype.Controller;  
import org.springframework.web.bind.annotation.PathVariable;  
import org.springframework.web.bind.annotation.RequestMapping;  
import org.springframework.web.servlet.ModelAndView;  
  
@Controller  
@RequestMapping("/player")  
public class PlayerController {
  
    @RequestMapping(value = "/{id}")  
    public ModelAndView getAudio(@PathVariable String id, HttpServletRequest request,HttpServletResponse response) throws Exception {  

                  
        String range = request.getHeader("Range");
        String[] rs = range.split("\\=");  
        range = rs[1].split("\\-")[0];
  
  		//读取本地文件start
        String path = request.getServletContext().getRealPath("/"); //获取相对路径

        File file = new File(path + "/WEB-INF/mp3/" + id + ".mp3");
        if(!file.exists()) throw new RuntimeException("音频文件不存在 --> 404"); 

        OutputStream os = response.getOutputStream(); //后台响应

        FileInputStream fis = new FileInputStream(file);
        long length = file.length();  
        System.out.println("file length : " + length);  
        // 播放进度  
        int count = 0;  
        // 播放百分比  
        int percent = (int)(length * 0.4);  
  
        int irange = Integer.parseInt(range);  
        length = length - irange;  
  
        response.addHeader("Accept-Ranges", "bytes");  
        
        response.addHeader("Content-Length", length + "");  
        
        response.addHeader("Content-Range", "bytes " + range + "-" + length + "/" + length);  
        
        response.addHeader("Content-Type", "audio/mpeg;charset=UTF-8");//注意是否与自己需要返回的文件格式是否相同
        
        int len = 0;
        byte[] b = new byte[1024];  
        while ((len = fis.read(b)) != -1) {  
            os.write(b, 0, len);  
            count += len;  
            if(count >= percent){  
                break;  
            }  
        }  
        System.out.println("count: " + count + ", percent: " + percent);  
        fis.close();  
        os.close();  
        return null;
        //读取本地文件end



        //读取远程文件start
        URL url = new URL("http://192.168.2.53/甜蜜蜜.wav");
        URLConnection conn = url.openConnection();
        response.setContentLength(conn.getContentLength());

        InputStream ism=conn.getInputStream();

        byte[] bytes=new byte[1024];
        OutputStream os=response.getOutputStream();
        int n=0;
        long length=0L;
        while((n=ism.read(bytes))!=-1){
            os.write(bytes,0,n);
        }
        os.close();
         //读取远程文件end
    }  
  
}  